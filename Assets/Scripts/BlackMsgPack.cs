// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(33)
            {
                { typeof(global::ScString[]), 0 },
                { typeof(global::System.Collections.Generic.Dictionary<global::ScString, global::ScInt>), 1 },
                { typeof(global::System.Collections.Generic.Dictionary<global::ScString, global::StrBaseData>), 2 },
                { typeof(global::System.Collections.Generic.Dictionary<global::ScString, global::System.Collections.Generic.List<global::ScString>>), 3 },
                { typeof(global::System.Collections.Generic.Dictionary<string, global::LocalUserData>), 4 },
                { typeof(global::System.Collections.Generic.Dictionary<string, string>), 5 },
                { typeof(global::System.Collections.Generic.HashSet<global::ScString>), 6 },
                { typeof(global::System.Collections.Generic.HashSet<uint>), 7 },
                { typeof(global::System.Collections.Generic.List<global::AchievementData>), 8 },
                { typeof(global::System.Collections.Generic.List<global::DailyRewardData>), 9 },
                { typeof(global::System.Collections.Generic.List<global::ScLong>), 10 },
                { typeof(global::System.Collections.Generic.List<global::ScString>), 11 },
                { typeof(global::System.Collections.Generic.List<global::StageSequenceData>), 12 },
                { typeof(global::System.Collections.Generic.List<int>), 13 },
                { typeof(global::BlackLanguageCode), 14 },
                { typeof(global::RewardType), 15 },
                { typeof(global::AchievementData), 16 },
                { typeof(global::BlackSaveData), 17 },
                { typeof(global::DailyRewardData), 18 },
                { typeof(global::DataSet), 19 },
                { typeof(global::DataSetHash), 20 },
                { typeof(global::Dirichlet.Numerics.UInt128), 21 },
                { typeof(global::LocalUserData), 22 },
                { typeof(global::NoticeData), 23 },
                { typeof(global::ScFloat), 24 },
                { typeof(global::ScInt), 25 },
                { typeof(global::ScLong), 26 },
                { typeof(global::ScString), 27 },
                { typeof(global::ScUInt128), 28 },
                { typeof(global::StageSaveData), 29 },
                { typeof(global::StageSequenceData), 30 },
                { typeof(global::StrBaseData), 31 },
                { typeof(global::UDateTime), 32 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ArrayFormatter<global::ScString>();
                case 1: return new global::MessagePack.Formatters.DictionaryFormatter<global::ScString, global::ScInt>();
                case 2: return new global::MessagePack.Formatters.DictionaryFormatter<global::ScString, global::StrBaseData>();
                case 3: return new global::MessagePack.Formatters.DictionaryFormatter<global::ScString, global::System.Collections.Generic.List<global::ScString>>();
                case 4: return new global::MessagePack.Formatters.DictionaryFormatter<string, global::LocalUserData>();
                case 5: return new global::MessagePack.Formatters.DictionaryFormatter<string, string>();
                case 6: return new global::MessagePack.Formatters.HashSetFormatter<global::ScString>();
                case 7: return new global::MessagePack.Formatters.HashSetFormatter<uint>();
                case 8: return new global::MessagePack.Formatters.ListFormatter<global::AchievementData>();
                case 9: return new global::MessagePack.Formatters.ListFormatter<global::DailyRewardData>();
                case 10: return new global::MessagePack.Formatters.ListFormatter<global::ScLong>();
                case 11: return new global::MessagePack.Formatters.ListFormatter<global::ScString>();
                case 12: return new global::MessagePack.Formatters.ListFormatter<global::StageSequenceData>();
                case 13: return new global::MessagePack.Formatters.ListFormatter<int>();
                case 14: return new MessagePack.Formatters.BlackLanguageCodeFormatter();
                case 15: return new MessagePack.Formatters.RewardTypeFormatter();
                case 16: return new MessagePack.Formatters.AchievementDataFormatter();
                case 17: return new MessagePack.Formatters.BlackSaveDataFormatter();
                case 18: return new MessagePack.Formatters.DailyRewardDataFormatter();
                case 19: return new MessagePack.Formatters.DataSetFormatter();
                case 20: return new MessagePack.Formatters.DataSetHashFormatter();
                case 21: return new MessagePack.Formatters.Dirichlet.Numerics.UInt128Formatter();
                case 22: return new MessagePack.Formatters.LocalUserDataFormatter();
                case 23: return new MessagePack.Formatters.NoticeDataFormatter();
                case 24: return new MessagePack.Formatters.ScFloatFormatter();
                case 25: return new MessagePack.Formatters.ScIntFormatter();
                case 26: return new MessagePack.Formatters.ScLongFormatter();
                case 27: return new MessagePack.Formatters.ScStringFormatter();
                case 28: return new MessagePack.Formatters.ScUInt128Formatter();
                case 29: return new MessagePack.Formatters.StageSaveDataFormatter();
                case 30: return new MessagePack.Formatters.StageSequenceDataFormatter();
                case 31: return new MessagePack.Formatters.StrBaseDataFormatter();
                case 32: return new MessagePack.Formatters.UDateTimeFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class BlackLanguageCodeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::BlackLanguageCode>
    {
        public void Serialize(ref MessagePackWriter writer, global::BlackLanguageCode value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::BlackLanguageCode Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::BlackLanguageCode)reader.ReadInt32();
        }
    }

    public sealed class RewardTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::RewardType>
    {
        public void Serialize(ref MessagePackWriter writer, global::RewardType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::RewardType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::RewardType)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class AchievementDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AchievementData>
    {


        public void Serialize(ref MessagePackWriter writer, global::AchievementData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(12);
            formatterResolver.GetFormatterWithVerify<global::ScInt>().Serialize(ref writer, value.id, options);
            formatterResolver.GetFormatterWithVerify<global::ScString>().Serialize(ref writer, value.sprite, options);
            formatterResolver.GetFormatterWithVerify<global::ScString>().Serialize(ref writer, value.name, options);
            formatterResolver.GetFormatterWithVerify<global::ScString>().Serialize(ref writer, value.desc, options);
            formatterResolver.GetFormatterWithVerify<global::ScString>().Serialize(ref writer, value.condition, options);
            formatterResolver.GetFormatterWithVerify<global::ScLong>().Serialize(ref writer, value.conditionOldArg, options);
            formatterResolver.GetFormatterWithVerify<global::ScLong>().Serialize(ref writer, value.conditionNewArg, options);
            formatterResolver.GetFormatterWithVerify<global::ScInt>().Serialize(ref writer, value.rewardGemMultiplier, options);
            formatterResolver.GetFormatterWithVerify<global::ScLong>().Serialize(ref writer, value.rewardGem, options);
            writer.Write(value.isPlatformAchievement);
            formatterResolver.GetFormatterWithVerify<global::ScString>().Serialize(ref writer, value.androidAchievementKey, options);
            formatterResolver.GetFormatterWithVerify<global::ScString>().Serialize(ref writer, value.iosAchievementKey, options);
        }

        public global::AchievementData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __androidAchievementKey__ = default(global::ScString);
            var __condition__ = default(global::ScString);
            var __conditionNewArg__ = default(global::ScLong);
            var __conditionOldArg__ = default(global::ScLong);
            var __desc__ = default(global::ScString);
            var __id__ = default(global::ScInt);
            var __iosAchievementKey__ = default(global::ScString);
            var __isPlatformAchievement__ = default(bool);
            var __name__ = default(global::ScString);
            var __rewardGem__ = default(global::ScLong);
            var __rewardGemMultiplier__ = default(global::ScInt);
            var __sprite__ = default(global::ScString);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 10:
                        __androidAchievementKey__ = formatterResolver.GetFormatterWithVerify<global::ScString>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __condition__ = formatterResolver.GetFormatterWithVerify<global::ScString>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __conditionNewArg__ = formatterResolver.GetFormatterWithVerify<global::ScLong>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __conditionOldArg__ = formatterResolver.GetFormatterWithVerify<global::ScLong>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __desc__ = formatterResolver.GetFormatterWithVerify<global::ScString>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __id__ = formatterResolver.GetFormatterWithVerify<global::ScInt>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __iosAchievementKey__ = formatterResolver.GetFormatterWithVerify<global::ScString>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __isPlatformAchievement__ = reader.ReadBoolean();
                        break;
                    case 2:
                        __name__ = formatterResolver.GetFormatterWithVerify<global::ScString>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __rewardGem__ = formatterResolver.GetFormatterWithVerify<global::ScLong>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __rewardGemMultiplier__ = formatterResolver.GetFormatterWithVerify<global::ScInt>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __sprite__ = formatterResolver.GetFormatterWithVerify<global::ScString>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AchievementData();
            ____result.androidAchievementKey = __androidAchievementKey__;
            ____result.condition = __condition__;
            ____result.conditionNewArg = __conditionNewArg__;
            ____result.conditionOldArg = __conditionOldArg__;
            ____result.desc = __desc__;
            ____result.id = __id__;
            ____result.iosAchievementKey = __iosAchievementKey__;
            ____result.isPlatformAchievement = __isPlatformAchievement__;
            ____result.name = __name__;
            ____result.rewardGem = __rewardGem__;
            ____result.rewardGemMultiplier = __rewardGemMultiplier__;
            ____result.sprite = __sprite__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BlackSaveDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::BlackSaveData>
    {


        public void Serialize(ref MessagePackWriter writer, global::BlackSaveData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(37);
            formatterResolver.GetFormatterWithVerify<global::ScInt>().Serialize(ref writer, value.version, options);
            formatterResolver.GetFormatterWithVerify<global::ScInt>().Serialize(ref writer, value.lastClearedStageId, options);
            formatterResolver.GetFormatterWithVerify<global::ScUInt128>().Serialize(ref writer, value.goldScUInt128, options);
            formatterResolver.GetFormatterWithVerify<global::ScUInt128>().Serialize(ref writer, value.pendingGoldScUInt128, options);
            formatterResolver.GetFormatterWithVerify<global::ScUInt128>().Serialize(ref writer, value.freeGemScUInt128, options);
            formatterResolver.GetFormatterWithVerify<global::ScUInt128>().Serialize(ref writer, value.pendingFreeGemScUInt128, options);
            formatterResolver.GetFormatterWithVerify<global::ScUInt128>().Serialize(ref writer, value.paidGemScUInt128, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::ScString>>().Serialize(ref writer, value.stashedRewardJsonList, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::ScLong>>().Serialize(ref writer, value.lastDailyRewardRedeemedTicksList, options);
            formatterResolver.GetFormatterWithVerify<global::ScInt>().Serialize(ref writer, value.noAdsCode, options);
            formatterResolver.GetFormatterWithVerify<global::ScLong>().Serialize(ref writer, value.lastDailyRewardRedeemedIndex, options);
            formatterResolver.GetFormatterWithVerify<global::ScLong>().Serialize(ref writer, value.lastDailyRewardRedeemedTicks, options);
            writer.Write(value.muteBgmAudioSource);
            writer.Write(value.muteSfxAudioSource);
            writer.Write(value.bgmAudioVolume);
            writer.Write(value.sfxAudioVolume);
            writer.Write(value.notchSupport);
            writer.Write(value.bottomNotchSupport);
            writer.Write(value.performanceMode);
            writer.Write(value.alwaysOn);
            writer.Write(value.bigScreen);
            formatterResolver.GetFormatterWithVerify<global::ScInt>().Serialize(ref writer, value.userPseudoId, options);
            formatterResolver.GetFormatterWithVerify<global::ScInt>().Serialize(ref writer, value.lastConsumedServiceIndex, options);
            formatterResolver.GetFormatterWithVerify<global::BlackLanguageCode>().Serialize(ref writer, value.languageCode, options);
            formatterResolver.GetFormatterWithVerify<global::NoticeData>().Serialize(ref writer, value.noticeData, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, global::LocalUserData>>().Serialize(ref writer, value.localUserDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::ScString, global::ScInt>>().Serialize(ref writer, value.purchasedProductDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::ScString, global::System.Collections.Generic.List<global::ScString>>>().Serialize(ref writer, value.purchasedProductReceipts, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.HashSet<global::ScString>>().Serialize(ref writer, value.verifiedProductReceipts, options);
            writer.Write(value.cheatMode);
            writer.Write(value.waiveBan);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Serialize(ref writer, value.clearedDebrisIndexList, options);
            formatterResolver.GetFormatterWithVerify<global::ScUInt128>().Serialize(ref writer, value.maxBlackLevelGathered, options);
            formatterResolver.GetFormatterWithVerify<global::ScUInt128>().Serialize(ref writer, value.maxBlackLevelRedeemed, options);
            formatterResolver.GetFormatterWithVerify<global::ScUInt128>().Serialize(ref writer, value.maxColoringComboGathered, options);
            formatterResolver.GetFormatterWithVerify<global::ScUInt128>().Serialize(ref writer, value.maxColoringComboRedeemed, options);
            writer.Write(value.stageLockRemainTime);
        }

        public global::BlackSaveData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __alwaysOn__ = default(bool);
            var __bgmAudioVolume__ = default(float);
            var __bigScreen__ = default(bool);
            var __bottomNotchSupport__ = default(bool);
            var __cheatMode__ = default(bool);
            var __freeGemScUInt128__ = default(global::ScUInt128);
            var __languageCode__ = default(global::BlackLanguageCode);
            var __lastClearedStageId__ = default(global::ScInt);
            var __lastConsumedServiceIndex__ = default(global::ScInt);
            var __lastDailyRewardRedeemedIndex__ = default(global::ScLong);
            var __lastDailyRewardRedeemedTicks__ = default(global::ScLong);
            var __lastDailyRewardRedeemedTicksList__ = default(global::System.Collections.Generic.List<global::ScLong>);
            var __localUserDict__ = default(global::System.Collections.Generic.Dictionary<string, global::LocalUserData>);
            var __muteBgmAudioSource__ = default(bool);
            var __muteSfxAudioSource__ = default(bool);
            var __noAdsCode__ = default(global::ScInt);
            var __notchSupport__ = default(bool);
            var __noticeData__ = default(global::NoticeData);
            var __paidGemScUInt128__ = default(global::ScUInt128);
            var __pendingFreeGemScUInt128__ = default(global::ScUInt128);
            var __pendingGoldScUInt128__ = default(global::ScUInt128);
            var __performanceMode__ = default(bool);
            var __purchasedProductDict__ = default(global::System.Collections.Generic.Dictionary<global::ScString, global::ScInt>);
            var __purchasedProductReceipts__ = default(global::System.Collections.Generic.Dictionary<global::ScString, global::System.Collections.Generic.List<global::ScString>>);
            var __goldScUInt128__ = default(global::ScUInt128);
            var __sfxAudioVolume__ = default(float);
            var __stashedRewardJsonList__ = default(global::System.Collections.Generic.List<global::ScString>);
            var __userPseudoId__ = default(global::ScInt);
            var __verifiedProductReceipts__ = default(global::System.Collections.Generic.HashSet<global::ScString>);
            var __version__ = default(global::ScInt);
            var __waiveBan__ = default(bool);
            var __clearedDebrisIndexList__ = default(global::System.Collections.Generic.List<int>);
            var __maxBlackLevelGathered__ = default(global::ScUInt128);
            var __maxBlackLevelRedeemed__ = default(global::ScUInt128);
            var __maxColoringComboGathered__ = default(global::ScUInt128);
            var __maxColoringComboRedeemed__ = default(global::ScUInt128);
            var __stageLockRemainTime__ = default(float);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 19:
                        __alwaysOn__ = reader.ReadBoolean();
                        break;
                    case 14:
                        __bgmAudioVolume__ = reader.ReadSingle();
                        break;
                    case 20:
                        __bigScreen__ = reader.ReadBoolean();
                        break;
                    case 17:
                        __bottomNotchSupport__ = reader.ReadBoolean();
                        break;
                    case 29:
                        __cheatMode__ = reader.ReadBoolean();
                        break;
                    case 4:
                        __freeGemScUInt128__ = formatterResolver.GetFormatterWithVerify<global::ScUInt128>().Deserialize(ref reader, options);
                        break;
                    case 23:
                        __languageCode__ = formatterResolver.GetFormatterWithVerify<global::BlackLanguageCode>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __lastClearedStageId__ = formatterResolver.GetFormatterWithVerify<global::ScInt>().Deserialize(ref reader, options);
                        break;
                    case 22:
                        __lastConsumedServiceIndex__ = formatterResolver.GetFormatterWithVerify<global::ScInt>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __lastDailyRewardRedeemedIndex__ = formatterResolver.GetFormatterWithVerify<global::ScLong>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __lastDailyRewardRedeemedTicks__ = formatterResolver.GetFormatterWithVerify<global::ScLong>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __lastDailyRewardRedeemedTicksList__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::ScLong>>().Deserialize(ref reader, options);
                        break;
                    case 25:
                        __localUserDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, global::LocalUserData>>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __muteBgmAudioSource__ = reader.ReadBoolean();
                        break;
                    case 13:
                        __muteSfxAudioSource__ = reader.ReadBoolean();
                        break;
                    case 9:
                        __noAdsCode__ = formatterResolver.GetFormatterWithVerify<global::ScInt>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __notchSupport__ = reader.ReadBoolean();
                        break;
                    case 24:
                        __noticeData__ = formatterResolver.GetFormatterWithVerify<global::NoticeData>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __paidGemScUInt128__ = formatterResolver.GetFormatterWithVerify<global::ScUInt128>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __pendingFreeGemScUInt128__ = formatterResolver.GetFormatterWithVerify<global::ScUInt128>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __pendingGoldScUInt128__ = formatterResolver.GetFormatterWithVerify<global::ScUInt128>().Deserialize(ref reader, options);
                        break;
                    case 18:
                        __performanceMode__ = reader.ReadBoolean();
                        break;
                    case 26:
                        __purchasedProductDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::ScString, global::ScInt>>().Deserialize(ref reader, options);
                        break;
                    case 27:
                        __purchasedProductReceipts__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::ScString, global::System.Collections.Generic.List<global::ScString>>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __goldScUInt128__ = formatterResolver.GetFormatterWithVerify<global::ScUInt128>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __sfxAudioVolume__ = reader.ReadSingle();
                        break;
                    case 7:
                        __stashedRewardJsonList__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::ScString>>().Deserialize(ref reader, options);
                        break;
                    case 21:
                        __userPseudoId__ = formatterResolver.GetFormatterWithVerify<global::ScInt>().Deserialize(ref reader, options);
                        break;
                    case 28:
                        __verifiedProductReceipts__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.HashSet<global::ScString>>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __version__ = formatterResolver.GetFormatterWithVerify<global::ScInt>().Deserialize(ref reader, options);
                        break;
                    case 30:
                        __waiveBan__ = reader.ReadBoolean();
                        break;
                    case 31:
                        __clearedDebrisIndexList__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Deserialize(ref reader, options);
                        break;
                    case 32:
                        __maxBlackLevelGathered__ = formatterResolver.GetFormatterWithVerify<global::ScUInt128>().Deserialize(ref reader, options);
                        break;
                    case 33:
                        __maxBlackLevelRedeemed__ = formatterResolver.GetFormatterWithVerify<global::ScUInt128>().Deserialize(ref reader, options);
                        break;
                    case 34:
                        __maxColoringComboGathered__ = formatterResolver.GetFormatterWithVerify<global::ScUInt128>().Deserialize(ref reader, options);
                        break;
                    case 35:
                        __maxColoringComboRedeemed__ = formatterResolver.GetFormatterWithVerify<global::ScUInt128>().Deserialize(ref reader, options);
                        break;
                    case 36:
                        __stageLockRemainTime__ = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::BlackSaveData();
            ____result.alwaysOn = __alwaysOn__;
            ____result.bgmAudioVolume = __bgmAudioVolume__;
            ____result.bigScreen = __bigScreen__;
            ____result.bottomNotchSupport = __bottomNotchSupport__;
            ____result.cheatMode = __cheatMode__;
            ____result.freeGemScUInt128 = __freeGemScUInt128__;
            ____result.languageCode = __languageCode__;
            ____result.lastClearedStageId = __lastClearedStageId__;
            ____result.lastConsumedServiceIndex = __lastConsumedServiceIndex__;
            ____result.lastDailyRewardRedeemedIndex = __lastDailyRewardRedeemedIndex__;
            ____result.lastDailyRewardRedeemedTicks = __lastDailyRewardRedeemedTicks__;
            ____result.lastDailyRewardRedeemedTicksList = __lastDailyRewardRedeemedTicksList__;
            ____result.localUserDict = __localUserDict__;
            ____result.muteBgmAudioSource = __muteBgmAudioSource__;
            ____result.muteSfxAudioSource = __muteSfxAudioSource__;
            ____result.noAdsCode = __noAdsCode__;
            ____result.notchSupport = __notchSupport__;
            ____result.noticeData = __noticeData__;
            ____result.paidGemScUInt128 = __paidGemScUInt128__;
            ____result.pendingFreeGemScUInt128 = __pendingFreeGemScUInt128__;
            ____result.pendingGoldScUInt128 = __pendingGoldScUInt128__;
            ____result.performanceMode = __performanceMode__;
            ____result.purchasedProductDict = __purchasedProductDict__;
            ____result.purchasedProductReceipts = __purchasedProductReceipts__;
            ____result.goldScUInt128 = __goldScUInt128__;
            ____result.sfxAudioVolume = __sfxAudioVolume__;
            ____result.stashedRewardJsonList = __stashedRewardJsonList__;
            ____result.userPseudoId = __userPseudoId__;
            ____result.verifiedProductReceipts = __verifiedProductReceipts__;
            ____result.version = __version__;
            ____result.waiveBan = __waiveBan__;
            ____result.clearedDebrisIndexList = __clearedDebrisIndexList__;
            ____result.maxBlackLevelGathered = __maxBlackLevelGathered__;
            ____result.maxBlackLevelRedeemed = __maxBlackLevelRedeemed__;
            ____result.maxColoringComboGathered = __maxColoringComboGathered__;
            ____result.maxColoringComboRedeemed = __maxColoringComboRedeemed__;
            ____result.stageLockRemainTime = __stageLockRemainTime__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DailyRewardDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::DailyRewardData>
    {


        public void Serialize(ref MessagePackWriter writer, global::DailyRewardData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(8);
            formatterResolver.GetFormatterWithVerify<global::ScInt>().Serialize(ref writer, value.day, options);
            formatterResolver.GetFormatterWithVerify<global::RewardType>().Serialize(ref writer, value.rewardType, options);
            formatterResolver.GetFormatterWithVerify<global::ScString>().Serialize(ref writer, value.desc, options);
            formatterResolver.GetFormatterWithVerify<global::ScString>().Serialize(ref writer, value.notificationDesc, options);
            formatterResolver.GetFormatterWithVerify<global::ScInt>().Serialize(ref writer, value.amount, options);
            formatterResolver.GetFormatterWithVerify<global::ScString>().Serialize(ref writer, value.sprite, options);
            writer.Write(value.hidden);
            writer.Write(value.stashedRedeemed);
        }

        public global::DailyRewardData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __amount__ = default(global::ScInt);
            var __day__ = default(global::ScInt);
            var __desc__ = default(global::ScString);
            var __hidden__ = default(bool);
            var __notificationDesc__ = default(global::ScString);
            var __rewardType__ = default(global::RewardType);
            var __sprite__ = default(global::ScString);
            var __stashedRedeemed__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 4:
                        __amount__ = formatterResolver.GetFormatterWithVerify<global::ScInt>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __day__ = formatterResolver.GetFormatterWithVerify<global::ScInt>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __desc__ = formatterResolver.GetFormatterWithVerify<global::ScString>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __hidden__ = reader.ReadBoolean();
                        break;
                    case 3:
                        __notificationDesc__ = formatterResolver.GetFormatterWithVerify<global::ScString>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __rewardType__ = formatterResolver.GetFormatterWithVerify<global::RewardType>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __sprite__ = formatterResolver.GetFormatterWithVerify<global::ScString>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __stashedRedeemed__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::DailyRewardData();
            ____result.amount = __amount__;
            ____result.day = __day__;
            ____result.desc = __desc__;
            ____result.hidden = __hidden__;
            ____result.notificationDesc = __notificationDesc__;
            ____result.rewardType = __rewardType__;
            ____result.sprite = __sprite__;
            ____result.stashedRedeemed = __stashedRedeemed__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DataSetFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::DataSet>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public DataSetFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "DailyRewardData", 0 },
                { "AchievementData_MaxBlackLevel", 1 },
                { "AchievementData_MaxColoringCombo", 2 },
                { "StageSequenceData", 3 },
                { "StrChData", 4 },
                { "StrEnData", 5 },
                { "StrJaData", 6 },
                { "StrKoData", 7 },
                { "StrTwData", 8 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("DailyRewardData"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("AchievementData_MaxBlackLevel"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("AchievementData_MaxColoringCombo"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("StageSequenceData"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("StrChData"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("StrEnData"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("StrJaData"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("StrKoData"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("StrTwData"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::DataSet value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(9);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::DailyRewardData>>().Serialize(ref writer, value.DailyRewardData, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AchievementData>>().Serialize(ref writer, value.AchievementData_MaxBlackLevel, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AchievementData>>().Serialize(ref writer, value.AchievementData_MaxColoringCombo, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::StageSequenceData>>().Serialize(ref writer, value.StageSequenceData, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::ScString, global::StrBaseData>>().Serialize(ref writer, value.StrChData, options);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::ScString, global::StrBaseData>>().Serialize(ref writer, value.StrEnData, options);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::ScString, global::StrBaseData>>().Serialize(ref writer, value.StrJaData, options);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::ScString, global::StrBaseData>>().Serialize(ref writer, value.StrKoData, options);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::ScString, global::StrBaseData>>().Serialize(ref writer, value.StrTwData, options);
        }

        public global::DataSet Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __DailyRewardData__ = default(global::System.Collections.Generic.List<global::DailyRewardData>);
            var __AchievementData_MaxBlackLevel__ = default(global::System.Collections.Generic.List<global::AchievementData>);
            var __AchievementData_MaxColoringCombo__ = default(global::System.Collections.Generic.List<global::AchievementData>);
            var __StageSequenceData__ = default(global::System.Collections.Generic.List<global::StageSequenceData>);
            var __StrChData__ = default(global::System.Collections.Generic.Dictionary<global::ScString, global::StrBaseData>);
            var __StrEnData__ = default(global::System.Collections.Generic.Dictionary<global::ScString, global::StrBaseData>);
            var __StrJaData__ = default(global::System.Collections.Generic.Dictionary<global::ScString, global::StrBaseData>);
            var __StrKoData__ = default(global::System.Collections.Generic.Dictionary<global::ScString, global::StrBaseData>);
            var __StrTwData__ = default(global::System.Collections.Generic.Dictionary<global::ScString, global::StrBaseData>);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __DailyRewardData__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::DailyRewardData>>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __AchievementData_MaxBlackLevel__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AchievementData>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __AchievementData_MaxColoringCombo__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AchievementData>>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __StageSequenceData__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::StageSequenceData>>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __StrChData__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::ScString, global::StrBaseData>>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __StrEnData__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::ScString, global::StrBaseData>>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __StrJaData__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::ScString, global::StrBaseData>>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __StrKoData__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::ScString, global::StrBaseData>>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __StrTwData__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::ScString, global::StrBaseData>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::DataSet();
            ____result.DailyRewardData = __DailyRewardData__;
            ____result.AchievementData_MaxBlackLevel = __AchievementData_MaxBlackLevel__;
            ____result.AchievementData_MaxColoringCombo = __AchievementData_MaxColoringCombo__;
            ____result.StageSequenceData = __StageSequenceData__;
            ____result.StrChData = __StrChData__;
            ____result.StrEnData = __StrEnData__;
            ____result.StrJaData = __StrJaData__;
            ____result.StrKoData = __StrKoData__;
            ____result.StrTwData = __StrTwData__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DataSetHashFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::DataSetHash>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public DataSetHashFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Hash", 0 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Hash"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::DataSetHash value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Serialize(ref writer, value.Hash, options);
        }

        public global::DataSetHash Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Hash__ = default(global::System.Collections.Generic.Dictionary<string, string>);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Hash__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::DataSetHash();
            ____result.Hash = __Hash__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LocalUserDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LocalUserData>
    {


        public void Serialize(ref MessagePackWriter writer, global::LocalUserData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            writer.Write(value.createdNetworkUtcTicks);
            writer.Write(value.lastUsedNetworkUtcTicks);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.id, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.name, options);
        }

        public global::LocalUserData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __createdNetworkUtcTicks__ = default(long);
            var __id__ = default(string);
            var __lastUsedNetworkUtcTicks__ = default(long);
            var __name__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __createdNetworkUtcTicks__ = reader.ReadInt64();
                        break;
                    case 2:
                        __id__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __lastUsedNetworkUtcTicks__ = reader.ReadInt64();
                        break;
                    case 3:
                        __name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::LocalUserData();
            ____result.createdNetworkUtcTicks = __createdNetworkUtcTicks__;
            ____result.id = __id__;
            ____result.lastUsedNetworkUtcTicks = __lastUsedNetworkUtcTicks__;
            ____result.name = __name__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class NoticeDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::NoticeData>
    {


        public void Serialize(ref MessagePackWriter writer, global::NoticeData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.title, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.text, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.detailUrl, options);
            writer.Write(value.eventDrawGoldRateRatio);
            formatterResolver.GetFormatterWithVerify<global::UDateTime>().Serialize(ref writer, value.eventDrawGoldRateRatioBegin, options);
            formatterResolver.GetFormatterWithVerify<global::UDateTime>().Serialize(ref writer, value.eventDrawGoldRateRatioEnd, options);
        }

        public global::NoticeData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __detailUrl__ = default(string);
            var __eventDrawGoldRateRatio__ = default(int);
            var __eventDrawGoldRateRatioBegin__ = default(global::UDateTime);
            var __eventDrawGoldRateRatioEnd__ = default(global::UDateTime);
            var __text__ = default(string);
            var __title__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 2:
                        __detailUrl__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __eventDrawGoldRateRatio__ = reader.ReadInt32();
                        break;
                    case 4:
                        __eventDrawGoldRateRatioBegin__ = formatterResolver.GetFormatterWithVerify<global::UDateTime>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __eventDrawGoldRateRatioEnd__ = formatterResolver.GetFormatterWithVerify<global::UDateTime>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __text__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __title__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::NoticeData();
            ____result.detailUrl = __detailUrl__;
            ____result.eventDrawGoldRateRatio = __eventDrawGoldRateRatio__;
            ____result.eventDrawGoldRateRatioBegin = __eventDrawGoldRateRatioBegin__;
            ____result.eventDrawGoldRateRatioEnd = __eventDrawGoldRateRatioEnd__;
            ____result.text = __text__;
            ____result.title = __title__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ScFloatFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ScFloat>
    {


        public void Serialize(ref MessagePackWriter writer, global::ScFloat value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            writer.Write(value.value);
        }

        public global::ScFloat Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __value__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __value__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ScFloat();
            ____result.value = __value__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ScIntFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ScInt>
    {


        public void Serialize(ref MessagePackWriter writer, global::ScInt value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            writer.Write(value.value);
        }

        public global::ScInt Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __value__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __value__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ScInt(__value__);
            ____result.value = __value__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ScLongFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ScLong>
    {


        public void Serialize(ref MessagePackWriter writer, global::ScLong value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            writer.Write(value.value);
        }

        public global::ScLong Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __value__ = default(long);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __value__ = reader.ReadInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ScLong(__value__);
            ____result.value = __value__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ScStringFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ScString>
    {


        public void Serialize(ref MessagePackWriter writer, global::ScString value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<byte[]>().Serialize(ref writer, value.value, options);
        }

        public global::ScString Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __value__ = default(byte[]);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __value__ = formatterResolver.GetFormatterWithVerify<byte[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ScString(__value__);
            ____result.value = __value__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ScUInt128Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ScUInt128>
    {


        public void Serialize(ref MessagePackWriter writer, global::ScUInt128 value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::Dirichlet.Numerics.UInt128>().Serialize(ref writer, value.value, options);
        }

        public global::ScUInt128 Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __value__ = default(global::Dirichlet.Numerics.UInt128);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __value__ = formatterResolver.GetFormatterWithVerify<global::Dirichlet.Numerics.UInt128>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ScUInt128(__value__);
            ____result.value = __value__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StageSaveDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::StageSaveData>
    {


        public void Serialize(ref MessagePackWriter writer, global::StageSaveData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.stageName, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.HashSet<uint>>().Serialize(ref writer, value.coloredMinPoints, options);
            writer.Write(value.zoomValue);
            writer.Write(value.targetImageCenterX);
            writer.Write(value.targetImageCenterY);
            writer.Write(value.remainTime);
        }

        public global::StageSaveData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __coloredMinPoints__ = default(global::System.Collections.Generic.HashSet<uint>);
            var __stageName__ = default(string);
            var __targetImageCenterX__ = default(float);
            var __targetImageCenterY__ = default(float);
            var __zoomValue__ = default(float);
            var __remainTime__ = default(float);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 1:
                        __coloredMinPoints__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.HashSet<uint>>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __stageName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __targetImageCenterX__ = reader.ReadSingle();
                        break;
                    case 4:
                        __targetImageCenterY__ = reader.ReadSingle();
                        break;
                    case 2:
                        __zoomValue__ = reader.ReadSingle();
                        break;
                    case 5:
                        __remainTime__ = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::StageSaveData();
            ____result.coloredMinPoints = __coloredMinPoints__;
            ____result.stageName = __stageName__;
            ____result.targetImageCenterX = __targetImageCenterX__;
            ____result.targetImageCenterY = __targetImageCenterY__;
            ____result.zoomValue = __zoomValue__;
            ____result.remainTime = __remainTime__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StageSequenceDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::StageSequenceData>
    {


        public void Serialize(ref MessagePackWriter writer, global::StageSequenceData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.stageId);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.stageName, options);
        }

        public global::StageSequenceData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __stageId__ = default(int);
            var __stageName__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __stageId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __stageName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::StageSequenceData();
            ____result.stageId = __stageId__;
            ____result.stageName = __stageName__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StrBaseDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::StrBaseData>
    {


        public void Serialize(ref MessagePackWriter writer, global::StrBaseData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::ScString>().Serialize(ref writer, value.id, options);
            formatterResolver.GetFormatterWithVerify<global::ScString[]>().Serialize(ref writer, value.str, options);
        }

        public global::StrBaseData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __id__ = default(global::ScString);
            var __str__ = default(global::ScString[]);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __id__ = formatterResolver.GetFormatterWithVerify<global::ScString>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __str__ = formatterResolver.GetFormatterWithVerify<global::ScString[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::StrBaseData();
            ____result.id = __id__;
            ____result.str = __str__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UDateTimeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::UDateTime>
    {


        public void Serialize(ref MessagePackWriter writer, global::UDateTime value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(0);
        }

        public global::UDateTime Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::UDateTime();
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Dirichlet.Numerics
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class UInt128Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Dirichlet.Numerics.UInt128>
    {


        public void Serialize(ref MessagePackWriter writer, global::Dirichlet.Numerics.UInt128 value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.s0);
            writer.Write(value.s1);
        }

        public global::Dirichlet.Numerics.UInt128 Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __s0__ = default(ulong);
            var __s1__ = default(ulong);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __s0__ = reader.ReadUInt64();
                        break;
                    case 1:
                        __s1__ = reader.ReadUInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Dirichlet.Numerics.UInt128(__s0__);
            ____result.s0 = __s0__;
            ____result.s1 = __s1__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

